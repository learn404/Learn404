datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  Session       Session[]
  Account       Account?
  isMember      Boolean   @default(false)
  admin         Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lessonProgress LessonProgress[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  name      String
  createdAt DateTime @default(now())
}

model Categories {
  id        String    @id @default(cuid())
  name        String    @unique
  sort_number Int?      @default(0)
  createdAt   DateTime  @default(now())
  Lessons     Lessons[]
}

model Lessons {
  id             String     @id @default(cuid())
  title          String
  slug           String
  Categories     Categories @relation(fields: [categoryId], references: [id])
  categoryId     String
  description    String?
  playbackId     String?
  videoId        String?
  duration       String?
  repository_url String?
  sort_number    Int        @default(0)

  draft     Boolean  @default(true)
  newLesson Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  LessonProgress LessonProgress[]
}

model LessonProgress {
  id        String  @id @default(cuid())
  userId    String
  lessonId  String
  completed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Lesson Lessons @relation(fields: [lessonId], references: [id])
  User   User    @relation(fields: [userId], references: [id])

  @@index([userId])
}
